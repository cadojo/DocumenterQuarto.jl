[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuartoDocumenter.jl",
    "section": "",
    "text": "1 Reference\n1.1 AstrodynamicalModels\n\n\n\n\n\n\nProvides astrodynamical models as AstrodynamicalModels.ODESystems. Check out the ModelingToolkit docs to learn how to use these systems for orbit propagation with DifferentialEquations, or see GeneralAstrodynamics for some convenient orbit propagation wrappers.\n\nExtended help\n\n\nLicense\nMIT License\nCopyright (c) 2023 Joseph D Carpinelli\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nExports\n\nAttitudeFunction\nAttitudeParameters\nAttitudeState\nAttitudeSystem\nCR3BFunction\nCR3BOrbit\nCR3BParameters\nCR3BState\nCR3BSystem\nCartesianOrbit\nCartesianState\nKeplerianOrbit\nKeplerianParameters\nKeplerianState\nNBFunction\nNBSystem\nOrbit\nOrbitalElements\nPlanarEntryFunction\nPlanarEntryParameters\nPlanarEntryState\nPlanarEntrySystem\nR2BFunction\nR2BOrbit\nR2BParameters\nR2BState\nR2BSystem\ndynamics\nparameters\nstate\nsystem\n\n\n\nImports\n\nBase\nCore\nDocStringExtensions\nLinearAlgebra\nMemoize\nModelingToolkit\nSciMLBase\nStaticArrays\nSymbolics\n\n\n\n\n\n\n\n\n1.2 AttitudeFunction\n\n\n\n\n\n\nAttitudeFunction(; stm, name, kwargs...)\nReturns an ODEFunction for spacecraft attitude dynamics.\n\nExtended Help\n\n\nUsage\nThe stm and name keyword arguments are passed to Attitude. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = AttitudeFunction()\nlet u = randn(7), p = randn(15), t = NaN # time invariant\n    f(u, p, t)\nend\n\n\n\n\n\n\n\n1.3 AttitudeParameters\n\n\n\n\n\n\nstruct AttitudeParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 15}\nA parameter vector for attitude dynamics.\n\n\n\n\n\n\n1.4 AttitudeState\n\n\n\n\n\n\nmutable struct AttitudeState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 7}\nA mutable state vector for attitude dynamics.\n\n\n\n\n\n\n1.5 AttitudeSystem\n\n\n\n\n\n\nAttitudeSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for atmospheric entry. Currently, only exponential atmosphere models are provided! The output model is cached with Memoize.jl. Planet-specific parameters default to Earth values.\nThe order of the states follows: [q‚ÇÅ, q‚ÇÇ, q‚ÇÉ, q‚ÇÑ, œâ‚ÇÅ, œâ‚ÇÇ, œâ‚ÇÉ].\nThe order of the parameters follows: []\n\nExtended Help\nThis model describes how an object moves through an exponential atmosphere, above a spherical planet.\n\n\nStates\n\nq: scalar-last attitude quaternion\nœâ: body rates (radians per second)\n\n\n\nParameters\n\nJ: inertial matrix\nL: lever arm where input torque is applied\nf: torques on the vehicle body (Newton-meters)\n\n\n\nUsage\nmodel = Attitude()\n\n\n\n\n\n\n\n1.6 CR3BFunction\n\n\n\n\n\n\nCR3BFunction(; stm, name, kwargs...)\nReturns an ODEFunction for CR3B dynamics.\nThe order of the states follows: [Œº].\nThe order of the parameters follows: [Œº].\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to CR3B. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = CR3BFunction(; stm=false, jac=true)\nlet u = randn(6), p = randn(1), t = 0\n    f(u, p, t)\nend\n\n\n\n\n\n\n\n1.7 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.\n\n\n\n\n\n\n1.8 CR3BParameters\n\n\n\n\n\n\nstruct CR3BParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA paremeter vector for CR3BP dynamics.\n\n\n\n\n\n\n1.9 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.\n\n\n\n\n\n\n1.10 CR3BSystem\n\n\n\n\n\n\nCR3BSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Circular Restricted Three-body Problem.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\nThe Circular Restricted Three-body Problem is a simplified dynamical model describing one small body (spacecraft, etc.) and two celestial bodies moving in a circle about their common center of mass. This may seem like an arbitrary simplification, but this assumption holds reasonably well for the Earth-Moon, Sun-Earth, and many other systems in our solar system.\n\n\nUsage\nmodel = CR3BSystem(; stm=true)\n\n\n\n\n\n\n\n1.11 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.\n\n\n\n\n\n\n1.12 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.\n\n\n\n\n\n\n1.13 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.\n\n\n\n\n\n\n1.14 KeplerianParameters\n\n\n\n\n\n\nstruct KeplerianParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA parameter vector for Keplerian dynamics.\n\n\n\n\n\n\n1.15 OrbitalElements\n\n\n\n\n\n\nmutable struct OrbitalElements{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Keplerian states.\n\n\n\n\n\n\n1.16 NBFunction\n\n\n\n\n\n\nNBFunction(N; stm, name, kwargs...)\nReturns an ODEFunction for NBP dynamics. The order of states and parameters in the ODEFunction arguments are equivalent to the order of states and parameters for the system produced with NBP(N). As a general rule, the order of the states follows: [x‚ÇÅ, y‚ÇÅ, z‚ÇÅ, ..., x‚Çô, y‚Çô, z‚Çô, xÃá‚ÇÅ, yÃá‚ÇÅ, zÃá‚ÇÅ, ..., xÃá‚Çô, yÃá‚Çô, zÃá‚Çô].\n\n\n\n\n\n\nNote\n\n\n\nUnlike R2BP and CR3BP, jac is set to false by default. The number of states for NBP systems can be very large for relatively small numbers of bodies (N). Enabling jac=true by default would cause unnecessarily long waiting times for this (memoize?) function to return for N ‚â• 3 or so. If N=2 and stm=true, setting jac=true could still result in several minutes of calculations, depending on the computer you‚Äôre using.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBe careful about specifying stm=true for systems with N ‚â• 3! If state transition matrix dynamics are enabled, you can calculate the total number of system states with N*6 + (N*6)^2. Note that this increases exponentially as N grows! For N == 6, unless you‚Äôre using parallelization, your computer may run for several hours.\n\n\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to NBP. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = NBFunction(3; stm=false, name=:NBP, jac=false, sparse=false)\nlet u = randn(3*6), p = randn(1 + 3), t = 0\n    f(u, p, t)\nend\n\n\n\n\n\n\n\n1.17 NBSystem\n\n\n\n\n\n\nNBSystem(N; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Newtonian N-body Problem.\nThe order of the states follows: [x‚ÇÅ, y‚ÇÅ, z‚ÇÅ, ..., x‚Çô, y‚Çô, z‚Çô, xÃá‚ÇÅ, yÃá‚ÇÅ, zÃá‚ÇÅ, ..., xÃá‚Çô, yÃá‚Çô, zÃá‚Çô].\nThe order of the parameters follows: [G, m‚ÇÅ, m‚ÇÇ, ..., m‚Çô].\n\n\n\n\n\n\nWarning\n\n\n\nBe careful about specifying stm=true for systems with N ‚â• 3! If state transition matrix dynamics are enabled, you can calculate the total number of system states with N*6 + (N*6)^2. Note that this increases exponentially as N grows! For N == 6, unless you‚Äôre using parallelization, your computer may run for several hours.\n\n\n\nExtended Help\nThe N-body problem is a model which describes how N bodies will move with respect to a common origin. This problem typically involves many bodies which act due to one force: electromagentism, gravity, etc. This model applies most closely to many celestial bodies moving due to gravity. That‚Äôs about right for a model in a package called AstrodynamicalModels!\n\n\nUsage\n# One model for ALL the planets in our solar system üòé\nmodel = NBSystem(9)\n\n\n\n\n\n\n\n1.18 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.\n\n\n\n\n\n\n1.19 OrbitalElements\n\n\n\n\n\n\nmutable struct OrbitalElements{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Keplerian states.\n\n\n\n\n\n\n1.20 PlanarEntryFunction\n\n\n\n\n\n\nPlanarEntryFunction(; name, kwargs...)\nReturns an ODEFunction for Planar Entry dynamics. Results are cached with Memoize.jl.\nThe order of the states follows: [Œ≥, v, r, Œ∏].\nThe order of the parameters follows: [R, P, H, m, A, C, Œº]\n\nExtended Help\n\n\nUsage\nThe name keyword argument is ]passed to PlanarEntry. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = PlanarEntryFunction()\nlet u = randn(4), p = randn(7), t = NaN # time invariant\n    f(u, p, t)\nend\n\n\n\n\n\n\n\n1.21 PlanarEntryParameters\n\n\n\n\n\n\nstruct PlanarEntryParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 7}\nA parameter vector for planar entry dynamics.\n\n\n\n\n\n\n1.22 PlanarEntryState\n\n\n\n\n\n\nmutable struct PlanarEntryState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 4}\nA state vector for planar entry dynamics.\n\n\n\n\n\n\n1.23 PlanarEntrySystem\n\n\n\n\n\n\nPlanarEntrySystem(; name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for atmospheric entry. Currently, only exponential atmosphere models are provided! The output model is cached with Memoize.jl. Planet-specific parameters default to Earth values.\nThe order of the states follows: [Œ≥, v, r, Œ∏].\nThe order of the parameters follows: [R, P, H, m, A, C, Œº]\n\nExtended Help\nThis model describes how an object moves through an exponential atmosphere, above a spherical planet.\n\n\nUsage\nmodel = PlanarEntrySystem()\n\n\n\n\n\n\n\n1.24 R2BFunction\n\n\n\n\n\n\nR2BFunction(; stm, name, kwargs...)\nReturns an ODEFunction for R2B dynamics.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to R2B. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = R2BFunction(; stm=false, name=:R2B, jac=true)\nlet u = randn(6), p = randn(1), t = 0\n    f(u, p, t)\nend\n\n\n\n\n\n\n\n1.25 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.\n\n\n\n\n\n\n1.26 R2BParameters\n\n\n\n\n\n\nstruct R2BParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA parameter vector for R2BP dynamics.\n\n\n\n\n\n\n1.27 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.\n\n\n\n\n\n\n1.28 R2BSystem\n\n\n\n\n\n\nR2BSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Restricted Two-body Problem.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\nThe Restricted Two-body Problem is a simplified dynamical model describing one small body (spacecraft, etc.) and one celestial body. The gravity of the celestial body exhibits a force on the small body. This model is commonly used as a simplification to descibe our solar systems‚Äô planets orbiting our sun, or a spacecraft orbiting Earth.\n\n\nUsage\nmodel = R2BSystem()\n\n\n\n\n\n\n\n1.29 dynamics\n\n\n\n\n\n\ndynamics(orbit, args; kwargs...)\nReturn the underlying dynamics of the system in the form of a ModelingToolkit.ODEFunction.\n\n\n\n\n\n\n1.30 parameters\n\n\n\n\n\n\nparameters(orbit)\nReturn the parameter vector for an Orbit.\n\n\n\n\n\n\n1.31 state\n\n\n\n\n\n\nstate(orbit)\nReturn the state vector for an Orbit.\n\n\n\n\n\n\n1.32 system\n\n\n\n\n\n\nsystem(orbit, args; kwargs...)\nReturn the underlying dynamics of the system in the form of a ModelingToolkit.ODESystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#astrodynamicalmodels",
    "href": "index.html#astrodynamicalmodels",
    "title": "QuartoDocumenter.jl",
    "section": "1.1 AstrodynamicalModels",
    "text": "1.1 AstrodynamicalModels\n\n\n\n\n\n\nProvides astrodynamical models as AstrodynamicalModels.ODESystems. Check out the ModelingToolkit docs to learn how to use these systems for orbit propagation with DifferentialEquations, or see GeneralAstrodynamics for some convenient orbit propagation wrappers.\n\nExtended help\n\n\nLicense\nMIT License\nCopyright (c) 2023 Joseph D Carpinelli\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nExports\n\nAttitudeFunction\nAttitudeParameters\nAttitudeState\nAttitudeSystem\nCR3BFunction\nCR3BOrbit\nCR3BParameters\nCR3BState\nCR3BSystem\nCartesianOrbit\nCartesianState\nKeplerianOrbit\nKeplerianParameters\nKeplerianState\nNBFunction\nNBSystem\nOrbit\nOrbitalElements\nPlanarEntryFunction\nPlanarEntryParameters\nPlanarEntryState\nPlanarEntrySystem\nR2BFunction\nR2BOrbit\nR2BParameters\nR2BState\nR2BSystem\ndynamics\nparameters\nstate\nsystem\n\n\n\nImports\n\nBase\nCore\nDocStringExtensions\nLinearAlgebra\nMemoize\nModelingToolkit\nSciMLBase\nStaticArrays\nSymbolics",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#attitudefunction",
    "href": "index.html#attitudefunction",
    "title": "QuartoDocumenter.jl",
    "section": "1.2 AttitudeFunction",
    "text": "1.2 AttitudeFunction\n\n\n\n\n\n\nAttitudeFunction(; stm, name, kwargs...)\nReturns an ODEFunction for spacecraft attitude dynamics.\n\nExtended Help\n\n\nUsage\nThe stm and name keyword arguments are passed to Attitude. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = AttitudeFunction()\nlet u = randn(7), p = randn(15), t = NaN # time invariant\n    f(u, p, t)\nend",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#attitudeparameters",
    "href": "index.html#attitudeparameters",
    "title": "QuartoDocumenter.jl",
    "section": "1.3 AttitudeParameters",
    "text": "1.3 AttitudeParameters\n\n\n\n\n\n\nstruct AttitudeParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 15}\nA parameter vector for attitude dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#attitudestate",
    "href": "index.html#attitudestate",
    "title": "QuartoDocumenter.jl",
    "section": "1.4 AttitudeState",
    "text": "1.4 AttitudeState\n\n\n\n\n\n\nmutable struct AttitudeState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 7}\nA mutable state vector for attitude dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#attitudesystem",
    "href": "index.html#attitudesystem",
    "title": "QuartoDocumenter.jl",
    "section": "1.5 AttitudeSystem",
    "text": "1.5 AttitudeSystem\n\n\n\n\n\n\nAttitudeSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for atmospheric entry. Currently, only exponential atmosphere models are provided! The output model is cached with Memoize.jl. Planet-specific parameters default to Earth values.\nThe order of the states follows: [q‚ÇÅ, q‚ÇÇ, q‚ÇÉ, q‚ÇÑ, œâ‚ÇÅ, œâ‚ÇÇ, œâ‚ÇÉ].\nThe order of the parameters follows: []\n\nExtended Help\nThis model describes how an object moves through an exponential atmosphere, above a spherical planet.\n\n\nStates\n\nq: scalar-last attitude quaternion\nœâ: body rates (radians per second)\n\n\n\nParameters\n\nJ: inertial matrix\nL: lever arm where input torque is applied\nf: torques on the vehicle body (Newton-meters)\n\n\n\nUsage\nmodel = Attitude()",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cr3bfunction",
    "href": "index.html#cr3bfunction",
    "title": "QuartoDocumenter.jl",
    "section": "1.6 CR3BFunction",
    "text": "1.6 CR3BFunction\n\n\n\n\n\n\nCR3BFunction(; stm, name, kwargs...)\nReturns an ODEFunction for CR3B dynamics.\nThe order of the states follows: [Œº].\nThe order of the parameters follows: [Œº].\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to CR3B. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = CR3BFunction(; stm=false, jac=true)\nlet u = randn(6), p = randn(1), t = 0\n    f(u, p, t)\nend",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbit",
    "href": "index.html#orbit",
    "title": "QuartoDocumenter.jl",
    "section": "1.7 Orbit",
    "text": "1.7 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cr3bparameters",
    "href": "index.html#cr3bparameters",
    "title": "QuartoDocumenter.jl",
    "section": "1.8 CR3BParameters",
    "text": "1.8 CR3BParameters\n\n\n\n\n\n\nstruct CR3BParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA paremeter vector for CR3BP dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cartesianstate",
    "href": "index.html#cartesianstate",
    "title": "QuartoDocumenter.jl",
    "section": "1.9 CartesianState",
    "text": "1.9 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cr3bsystem",
    "href": "index.html#cr3bsystem",
    "title": "QuartoDocumenter.jl",
    "section": "1.10 CR3BSystem",
    "text": "1.10 CR3BSystem\n\n\n\n\n\n\nCR3BSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Circular Restricted Three-body Problem.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\nThe Circular Restricted Three-body Problem is a simplified dynamical model describing one small body (spacecraft, etc.) and two celestial bodies moving in a circle about their common center of mass. This may seem like an arbitrary simplification, but this assumption holds reasonably well for the Earth-Moon, Sun-Earth, and many other systems in our solar system.\n\n\nUsage\nmodel = CR3BSystem(; stm=true)",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbit-1",
    "href": "index.html#orbit-1",
    "title": "QuartoDocumenter.jl",
    "section": "1.11 Orbit",
    "text": "1.11 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cartesianstate-1",
    "href": "index.html#cartesianstate-1",
    "title": "QuartoDocumenter.jl",
    "section": "1.12 CartesianState",
    "text": "1.12 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbit-2",
    "href": "index.html#orbit-2",
    "title": "QuartoDocumenter.jl",
    "section": "1.13 Orbit",
    "text": "1.13 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#keplerianparameters",
    "href": "index.html#keplerianparameters",
    "title": "QuartoDocumenter.jl",
    "section": "1.14 KeplerianParameters",
    "text": "1.14 KeplerianParameters\n\n\n\n\n\n\nstruct KeplerianParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA parameter vector for Keplerian dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbitalelements",
    "href": "index.html#orbitalelements",
    "title": "QuartoDocumenter.jl",
    "section": "1.15 OrbitalElements",
    "text": "1.15 OrbitalElements\n\n\n\n\n\n\nmutable struct OrbitalElements{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Keplerian states.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#nbfunction",
    "href": "index.html#nbfunction",
    "title": "QuartoDocumenter.jl",
    "section": "1.16 NBFunction",
    "text": "1.16 NBFunction\n\n\n\n\n\n\nNBFunction(N; stm, name, kwargs...)\nReturns an ODEFunction for NBP dynamics. The order of states and parameters in the ODEFunction arguments are equivalent to the order of states and parameters for the system produced with NBP(N). As a general rule, the order of the states follows: [x‚ÇÅ, y‚ÇÅ, z‚ÇÅ, ..., x‚Çô, y‚Çô, z‚Çô, xÃá‚ÇÅ, yÃá‚ÇÅ, zÃá‚ÇÅ, ..., xÃá‚Çô, yÃá‚Çô, zÃá‚Çô].\n\n\n\n\n\n\nNote\n\n\n\nUnlike R2BP and CR3BP, jac is set to false by default. The number of states for NBP systems can be very large for relatively small numbers of bodies (N). Enabling jac=true by default would cause unnecessarily long waiting times for this (memoize?) function to return for N ‚â• 3 or so. If N=2 and stm=true, setting jac=true could still result in several minutes of calculations, depending on the computer you‚Äôre using.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBe careful about specifying stm=true for systems with N ‚â• 3! If state transition matrix dynamics are enabled, you can calculate the total number of system states with N*6 + (N*6)^2. Note that this increases exponentially as N grows! For N == 6, unless you‚Äôre using parallelization, your computer may run for several hours.\n\n\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to NBP. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = NBFunction(3; stm=false, name=:NBP, jac=false, sparse=false)\nlet u = randn(3*6), p = randn(1 + 3), t = 0\n    f(u, p, t)\nend",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#nbsystem",
    "href": "index.html#nbsystem",
    "title": "QuartoDocumenter.jl",
    "section": "1.17 NBSystem",
    "text": "1.17 NBSystem\n\n\n\n\n\n\nNBSystem(N; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Newtonian N-body Problem.\nThe order of the states follows: [x‚ÇÅ, y‚ÇÅ, z‚ÇÅ, ..., x‚Çô, y‚Çô, z‚Çô, xÃá‚ÇÅ, yÃá‚ÇÅ, zÃá‚ÇÅ, ..., xÃá‚Çô, yÃá‚Çô, zÃá‚Çô].\nThe order of the parameters follows: [G, m‚ÇÅ, m‚ÇÇ, ..., m‚Çô].\n\n\n\n\n\n\nWarning\n\n\n\nBe careful about specifying stm=true for systems with N ‚â• 3! If state transition matrix dynamics are enabled, you can calculate the total number of system states with N*6 + (N*6)^2. Note that this increases exponentially as N grows! For N == 6, unless you‚Äôre using parallelization, your computer may run for several hours.\n\n\n\nExtended Help\nThe N-body problem is a model which describes how N bodies will move with respect to a common origin. This problem typically involves many bodies which act due to one force: electromagentism, gravity, etc. This model applies most closely to many celestial bodies moving due to gravity. That‚Äôs about right for a model in a package called AstrodynamicalModels!\n\n\nUsage\n# One model for ALL the planets in our solar system üòé\nmodel = NBSystem(9)",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbit-3",
    "href": "index.html#orbit-3",
    "title": "QuartoDocumenter.jl",
    "section": "1.18 Orbit",
    "text": "1.18 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbitalelements-1",
    "href": "index.html#orbitalelements-1",
    "title": "QuartoDocumenter.jl",
    "section": "1.19 OrbitalElements",
    "text": "1.19 OrbitalElements\n\n\n\n\n\n\nmutable struct OrbitalElements{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Keplerian states.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#planarentryfunction",
    "href": "index.html#planarentryfunction",
    "title": "QuartoDocumenter.jl",
    "section": "1.20 PlanarEntryFunction",
    "text": "1.20 PlanarEntryFunction\n\n\n\n\n\n\nPlanarEntryFunction(; name, kwargs...)\nReturns an ODEFunction for Planar Entry dynamics. Results are cached with Memoize.jl.\nThe order of the states follows: [Œ≥, v, r, Œ∏].\nThe order of the parameters follows: [R, P, H, m, A, C, Œº]\n\nExtended Help\n\n\nUsage\nThe name keyword argument is ]passed to PlanarEntry. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = PlanarEntryFunction()\nlet u = randn(4), p = randn(7), t = NaN # time invariant\n    f(u, p, t)\nend",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#planarentryparameters",
    "href": "index.html#planarentryparameters",
    "title": "QuartoDocumenter.jl",
    "section": "1.21 PlanarEntryParameters",
    "text": "1.21 PlanarEntryParameters\n\n\n\n\n\n\nstruct PlanarEntryParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 7}\nA parameter vector for planar entry dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#planarentrystate",
    "href": "index.html#planarentrystate",
    "title": "QuartoDocumenter.jl",
    "section": "1.22 PlanarEntryState",
    "text": "1.22 PlanarEntryState\n\n\n\n\n\n\nmutable struct PlanarEntryState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 4}\nA state vector for planar entry dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#planarentrysystem",
    "href": "index.html#planarentrysystem",
    "title": "QuartoDocumenter.jl",
    "section": "1.23 PlanarEntrySystem",
    "text": "1.23 PlanarEntrySystem\n\n\n\n\n\n\nPlanarEntrySystem(; name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for atmospheric entry. Currently, only exponential atmosphere models are provided! The output model is cached with Memoize.jl. Planet-specific parameters default to Earth values.\nThe order of the states follows: [Œ≥, v, r, Œ∏].\nThe order of the parameters follows: [R, P, H, m, A, C, Œº]\n\nExtended Help\nThis model describes how an object moves through an exponential atmosphere, above a spherical planet.\n\n\nUsage\nmodel = PlanarEntrySystem()",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#r2bfunction",
    "href": "index.html#r2bfunction",
    "title": "QuartoDocumenter.jl",
    "section": "1.24 R2BFunction",
    "text": "1.24 R2BFunction\n\n\n\n\n\n\nR2BFunction(; stm, name, kwargs...)\nReturns an ODEFunction for R2B dynamics.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\n\n\nUsage\nThe stm, and name keyword arguments are passed to R2B. All other keyword arguments are passed directly to SciMLBase.ODEFunction.\nf = R2BFunction(; stm=false, name=:R2B, jac=true)\nlet u = randn(6), p = randn(1), t = 0\n    f(u, p, t)\nend",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#orbit-4",
    "href": "index.html#orbit-4",
    "title": "QuartoDocumenter.jl",
    "section": "1.25 Orbit",
    "text": "1.25 Orbit\n\n\n\n\n\n\nstruct Orbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)} &lt;: AstrodynamicalModels.AstrodynamicalOrbit{U&lt;:(AbstractVector), P&lt;:(AbstractVector)}\nA full representation of an orbit, including a numerical state, and the parameters of the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#r2bparameters",
    "href": "index.html#r2bparameters",
    "title": "QuartoDocumenter.jl",
    "section": "1.26 R2BParameters",
    "text": "1.26 R2BParameters\n\n\n\n\n\n\nstruct R2BParameters{F} &lt;: AstrodynamicalModels.AstrodynamicalParameters{F, 1}\nA parameter vector for R2BP dynamics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#cartesianstate-2",
    "href": "index.html#cartesianstate-2",
    "title": "QuartoDocumenter.jl",
    "section": "1.27 CartesianState",
    "text": "1.27 CartesianState\n\n\n\n\n\n\nmutable struct CartesianState{F} &lt;: AstrodynamicalModels.AstrodynamicalState{F, 6}\nA mutable vector, with labels, for 6DOF Cartesian states.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#r2bsystem",
    "href": "index.html#r2bsystem",
    "title": "QuartoDocumenter.jl",
    "section": "1.28 R2BSystem",
    "text": "1.28 R2BSystem\n\n\n\n\n\n\nR2BSystem(; stm, name, defaults, kwargs...)\nA ModelingToolkit.ODESystem for the Restricted Two-body Problem.\nThe order of the states follows: [x, y, z, xÃá, yÃá, zÃá].\nThe order of the parameters follows: [Œº].\n\nExtended Help\nThe Restricted Two-body Problem is a simplified dynamical model describing one small body (spacecraft, etc.) and one celestial body. The gravity of the celestial body exhibits a force on the small body. This model is commonly used as a simplification to descibe our solar systems‚Äô planets orbiting our sun, or a spacecraft orbiting Earth.\n\n\nUsage\nmodel = R2BSystem()",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#dynamics",
    "href": "index.html#dynamics",
    "title": "QuartoDocumenter.jl",
    "section": "1.29 dynamics",
    "text": "1.29 dynamics\n\n\n\n\n\n\ndynamics(orbit, args; kwargs...)\nReturn the underlying dynamics of the system in the form of a ModelingToolkit.ODEFunction.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#parameters-1",
    "href": "index.html#parameters-1",
    "title": "QuartoDocumenter.jl",
    "section": "1.30 parameters",
    "text": "1.30 parameters\n\n\n\n\n\n\nparameters(orbit)\nReturn the parameter vector for an Orbit.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#state",
    "href": "index.html#state",
    "title": "QuartoDocumenter.jl",
    "section": "1.31 state",
    "text": "1.31 state\n\n\n\n\n\n\nstate(orbit)\nReturn the state vector for an Orbit.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  },
  {
    "objectID": "index.html#system",
    "href": "index.html#system",
    "title": "QuartoDocumenter.jl",
    "section": "1.32 system",
    "text": "1.32 system\n\n\n\n\n\n\nsystem(orbit, args; kwargs...)\nReturn the underlying dynamics of the system in the form of a ModelingToolkit.ODESystem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Reference</span>"
    ]
  }
]