[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DocumenterQuarto",
    "section": "",
    "text": "1 DocumenterQuarto\nUse Documenter syntax with Quarto.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "DocumenterQuarto",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nWhat is DocumenterQuarto?\nQuarto is a single-source multi-target technical publishing system which can render HTML, PDF, DOCX, and many (many, many) other targets. The source format for Quarto is a flavor of Markdown that allows for executing code, including Julia code! This allows for documentation generation alongside executable code examples.\nDocumenterQuarto generates templates for Quarto websites (books, more precisely) which automatically document your Julia package, as well as utility functions to automatically parse Julia’s @doc output into Quarto Markdown. The workflow for rendering and publishing your documentation is identical to that of Documenter, so your CI should not need to change too much!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "DocumenterQuarto",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nChoose one of the two lines below!\nPkg.add(\"DocumenterQuarto\")  # in Julia code\npkg&gt; add DocumenterQuarto    # in Julia's REPL\nYou will also need to download Quarto, and install Jupyter. The simplest option for installing Jupyter is often: python -m pip install --user jupyter.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "DocumenterQuarto",
    "section": "1.3 Usage",
    "text": "1.3 Usage\nUsing DocumenterQuarto for your package.\n\n1.3.1 Documenting a New Package\nIf you don’t already have documentation for your package, use the following steps to generate a new documentation website.\n\nNavigate to the root directory of your Julia package.\nExecute the code below.\n\nimport Pkg\nPkg.add(url=\"https://github.com/cadojo/DocumenterQuarto.jl\")\n\nimport DocumenterQuarto\nDocumenterQuarto.generate()\n\n\n1.3.2 Documenting an Existing Package\nIf your package already has documentation, it is likely that the migration to a Quarto-based website will be easy! At this time, the simplest approach is likely to move your existing documentation, generate a new documentation site with the instructions above, and then move select Markdown files from your old documentation back into your new docs/src directory. There are some tips that are helpful to keep in mind.\n\nIn Documenter, you use @example to execute (and show) a block of code. In Quarto, this is provided by execution options and code blocks. In most cases, you can simply replace @example with {julia} and the code should execute when your documentation is rendered!\nAll codes are executed in Main, and are scoped to each individual file.\nTo have executable code in your Markdown, you have to use the .qmd file extension.\n\n\n\n1.3.3 Quarto and Julia Environments\nQuarto may automatically find a Julia environment. If you run into environment issues while rendering, try the following code.\nimport Pkg\nPkg.activate(\"docs\")\nPkg.develop(path=\".\")\nPkg.instantiate()\n\n\n1.3.4 Compatibility with LiveServer\nThis workflow is fully compatible with LiveServer! If using the make.jl script generated with DocumenterQuarto.generate, then you can serve the documentation locally with the following code.\nusing LiveServer\n\nservedocs(skip_dir=\"docs/src/.quarto\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "index.html#alternatives",
    "href": "index.html#alternatives",
    "title": "DocumenterQuarto",
    "section": "1.4 Alternatives",
    "text": "1.4 Alternatives\nOther excellent documentation packages.\nThere are plenty of documentation tools and packages in the Julia ecosystem; most of them are more robust and have more developer support than this package! Only a couple of alternative packages are shown below.\n\nDocumenter.jl is the primary documentation package in the Julia ecosystem.\nQuartoDocBuilder.jl is the first Quarto documentation package for Julia, and provides a simpler out-of-the-box Quarto project which looks excellent.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "2  Reference",
    "section": "",
    "text": "Docstrings for DocumenterQuarto.\n#| echo: false\n#| output: false\nusing DocumenterQuarto\n#| echo: false\n#| output: asis\nDocumenterQuarto.doc(DocumenterQuarto.generate)\n#| echo: false\n#| output: asis\nDocumenterQuarto.autodoc(DocumenterQuarto)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reference</span>"
    ]
  }
]